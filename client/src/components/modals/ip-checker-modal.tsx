import { useState, useRef } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { useLocation } from 'wouter';
import { 
  checkIpAddress, 
  isValidIpAddress, 
  generateIpReportDownload, 
  downloadIpReport,
  IpCheckResult,
  formatIpInput
} from '@/lib/ipService';
import ipSearchIcon from '../../assets/ip_search_icon.png';
import { queryClient } from '@/lib/queryClient';
import { Clipboard, Download } from 'lucide-react';

interface IpCheckerModalProps {
  isOpen: boolean;
  onClose: () => void;
  userId: number;
  serviceId: number | null;
}

export default function IpCheckerModal({ 
  isOpen, 
  onClose,
  userId,
  serviceId
}: IpCheckerModalProps) {
  const [ipAddress, setIpAddress] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [ipCheckResult, setIpCheckResult] = useState<IpCheckResult | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();
  const [, navigate] = useLocation();
  
  const handleIpCheck = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isValidIpAddress(ipAddress)) {
      toast({
        title: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å",
        variant: "destructive",
      });
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      const result = await checkIpAddress(ipAddress, userId);
      setIpCheckResult(result);
      
      // Invalidate balance query to reflect the purchase
      queryClient.invalidateQueries({ queryKey: ['/api/user'] });
      queryClient.invalidateQueries({ queryKey: ['/api/auth'] });
      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });
      
      // –ü–æ–ª—É—á–∞–µ–º transactionId –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const transactionId = result.transactionId;
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      onClose();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      // —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const checkAndNavigate = async () => {
        try {
          // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è —Å–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          await new Promise(resolve => setTimeout(resolve, 300));
          
          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const response = await fetch(`/api/transactions/${transactionId}`);
          if (response.ok) {
            // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å
            navigate(`/transaction/${transactionId}`);
          } else {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(checkAndNavigate, 1000);
          }
        } catch (err) {
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
          setTimeout(checkAndNavigate, 1000);
        }
      };
      
      checkAndNavigate();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      toast({
        title: "üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        description: "",
        variant: "default",
        duration: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
        className: "bg-green-50 border-green-200 text-gray-800 py-1 px-2 text-sm flex items-center justify-center", // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP –∞–¥—Ä–µ—Å",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ IP
  const handleIpInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ ipService
    const formattedValue = formatIpInput(value);
    setIpAddress(formattedValue);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–æ—â–∏ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ IP –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
  const handlePaste = () => {
    try {
      // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞
      // –ü–æ—ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—Å—Ç–∞–≤–∫–∏ –≤—Ä—É—á–Ω—É—é
      
      // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
      if (inputRef.current) {
        inputRef.current.focus();
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      
      if (isMobile) {
        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        toast({
          title: "–í—Å—Ç–∞–≤—å—Ç–µ IP –∞–¥—Ä–µ—Å",
          description: "–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ '–í—Å—Ç–∞–≤–∏—Ç—å'",
          variant: "default",
        });
      } else {
        // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Clipboard API
        navigator.clipboard.readText().then(text => {
          if (text) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            const formattedText = formatIpInput(text);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            setIpAddress(formattedText);
          }
        }).catch(error => {
          console.error("Clipboard error:", error);
          
          toast({
            title: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å",
            description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ IP –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é",
            variant: "destructive",
          });
        });
      }
    } catch (error) {
      console.error("Paste error:", error);
    }
  };
  
  const handleSaveReport = () => {
    if (!ipCheckResult) return;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    const reportText = `
IP CHECK REPORT
=======================

IP Address: ${ipCheckResult.ipCheck.ipAddress}
Country: ${ipCheckResult.ipCheck.country || 'Unknown'}
City: ${ipCheckResult.ipCheck.city || 'Unknown'}
ISP/Organization: ${ipCheckResult.ipCheck.isp || 'Unknown'}
Check Date: ${new Date(ipCheckResult.ipCheck.createdAt).toLocaleString()}

SECURITY CHECKS
=======================
Blacklisted: ${ipCheckResult.ipCheck.isBlacklisted ? 'YES (RISKY)' : 'NO (CLEAN)'}
Spam reports: ${ipCheckResult.ipCheck.isSpam ? 'YES (RISKY)' : 'NO (CLEAN)'}

ADDITIONAL DETAILS
=======================
${ipCheckResult.ipCheck.details && typeof ipCheckResult.ipCheck.details === 'object' 
  ? Object.entries(ipCheckResult.ipCheck.details)
    .filter(([key]) => !['ip', 'country_name', 'city', 'org'].includes(key))
    .map(([key, value]) => `${key}: ${value}`)
    .join('\n')
  : 'No additional details'}

Report ID: ${ipCheckResult.ipCheck.id}
Generated by CryptoWallet Telegram Mini App
`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    downloadIpReport(ipCheckResult.ipCheck, reportText);
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="sm:max-w-md fixed top-[160px] max-h-[calc(100vh-220px)] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center gap-2">
            <img src={ipSearchIcon} alt="IP Check" className="w-6 h-6" />
            <DialogTitle>–ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞</DialogTitle>
          </div>
        </DialogHeader>
        
        <div className="py-2">
          <p className="text-sm text-gray-600 mb-4">
            –í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º, –±–ª—ç–∫–ª–∏—Å—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
          </p>
          
          <form onSubmit={handleIpCheck}>
            <div className="mb-4">
              <Label htmlFor="ipAddress" className="block text-sm font-medium text-gray-700 mb-1">
                IP –∞–¥—Ä–µ—Å
              </Label>
              <div className="flex flex-col space-y-2">
                <div className="flex space-x-2">
                  <Input 
                    type="text" 
                    id="ipAddress" 
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8"
                    value={ipAddress}
                    onChange={handleIpInputChange}
                    ref={inputRef}
                    required
                    className="rounded"
                    pattern="[0-9.]+"
                    inputMode="numeric"
                    onKeyPress={(e) => {
                      // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É
                      const char = String.fromCharCode(e.charCode);
                      if (!/[0-9.]/.test(char)) {
                        e.preventDefault();
                      }
                    }}
                  />
                  <Button
                    type="button"
                    onClick={handlePaste}
                    className="min-w-[44px] px-3"
                    variant="outline"
                  >
                    <Clipboard className="h-4 w-4" />
                  </Button>
                </div>
                

              </div>
              <p className="text-xs text-gray-500 mt-1">
                –§–æ—Ä–º–∞—Ç: IPv4 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.1)
              </p>
            </div>
            
            <Button 
              type="submit"
              className="w-full"
              disabled={isSubmitting}
            >
              {isSubmitting ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..." : "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"}
            </Button>
          </form>
          
          {/* Results section */}
          {ipCheckResult && (
            <div className="mt-6">
              <h4 className="font-medium mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>
              
              <div className="bg-gray-50 rounded-lg p-3 mb-3">
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="text-gray-600">IP –∞–¥—Ä–µ—Å:</div>
                  <div className="font-medium">{ipCheckResult.ipCheck.ipAddress}</div>
                  
                  <div className="text-gray-600">–°—Ç—Ä–∞–Ω–∞:</div>
                  <div className="font-medium">{ipCheckResult.ipCheck.country || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}</div>
                  
                  <div className="text-gray-600">–ì–æ—Ä–æ–¥:</div>
                  <div className="font-medium">{ipCheckResult.ipCheck.city || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}</div>
                  
                  <div className="text-gray-600">–•–æ—Å—Ç–∏–Ω–≥/ISP:</div>
                  <div className="font-medium">{ipCheckResult.ipCheck.isp || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}</div>
                </div>
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center">
                  <span className={`material-icons mr-2 ${ipCheckResult.ipCheck.isBlacklisted ? 'text-red-500' : 'text-green-500'}`}>
                    {ipCheckResult.ipCheck.isBlacklisted ? 'error' : 'check_circle'}
                  </span>
                  <span>
                    {ipCheckResult.ipCheck.isBlacklisted ? '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–ª—ç–∫–ª–∏—Å—Ç–∞—Ö' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–ª—ç–∫–ª–∏—Å—Ç–∞—Ö'}
                  </span>
                </div>
                <div className="flex items-center">
                  <span className={`material-icons mr-2 ${ipCheckResult.ipCheck.isSpam ? 'text-red-500' : 'text-green-500'}`}>
                    {ipCheckResult.ipCheck.isSpam ? 'error' : 'check_circle'}
                  </span>
                  <span>
                    {ipCheckResult.ipCheck.isSpam ? '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤ —Å–ø–∞–º-–±–∞–∑–∞—Ö' : '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ —Å–ø–∞–º-–±–∞–∑–∞—Ö'}
                  </span>
                </div>
                {ipCheckResult.ipCheck.details?.hostname && (
                  <div className="flex items-center">
                    <span className="material-icons text-yellow-500 mr-2">info</span>
                    <span>{ipCheckResult.ipCheck.details.hostname}</span>
                  </div>
                )}
              </div>
              
              <Button 
                variant="outline"
                className="mt-4 w-full"
                onClick={handleSaveReport}
              >
                <Download className="w-4 h-4 mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
              </Button>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}

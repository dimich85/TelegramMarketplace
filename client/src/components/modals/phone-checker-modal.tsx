import { useState, useRef, useCallback } from 'react';
import { useLocation } from 'wouter';
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Icons } from "@/components/ui/icons";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { Loader2, ChevronRight } from "lucide-react";
import phoneCheckIcon from "../../assets/phone_check_icon.png";

interface PhoneCheckerModalProps {
  isOpen: boolean;
  onClose: () => void;
  userId: number;
  serviceId: number | null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
interface PhoneCheckResult {
  phoneCheck: {
    id: number;
    userId: number;
    phoneNumber: string;
    country: string;
    operator: string;
    isActive: boolean;
    isSpam: boolean;
    isVirtual: boolean;
    fraudScore: number;
    details: any;
    createdAt: string;
  };
  userBalance: number;
  transactionId: number;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
 * @param input –°—Ç—Ä–æ–∫–∞ –≤–≤–æ–¥–∞
 * @returns –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
function isPhoneInputValid(input: string): boolean {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, "+", "-", –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∫–æ–±–∫–∏
  return /^[\d\s\-\+\(\)]*$/.test(input);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–¥–∞–ª—è—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
 * @param input –°—Ç—Ä–æ–∫–∞ –≤–≤–æ–¥–∞
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function formatPhoneInput(input: string): string {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, "+", "-", –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∫–æ–±–æ–∫
  return input.replace(/[^\d\s\-\+\(\)]/g, '');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 * @param result –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @returns –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
 */
function generatePhoneReportText(result: PhoneCheckResult): string {
  const { phoneCheck } = result;
  const timestamp = new Date(phoneCheck.createdAt).toLocaleString();
  
  return `–û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê
========================================
–ù–æ–º–µ—Ä: ${phoneCheck.phoneNumber}
–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${timestamp}
ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${result.transactionId}
========================================

–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ${phoneCheck.country || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: ${phoneCheck.operator || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: ${phoneCheck.isActive ? '–î–∞' : '–ù–µ—Ç'}
‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: ${phoneCheck.isVirtual ? '–î–∞' : '–ù–µ—Ç'}
‚Ä¢ –°–ø–∞–º/–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ: ${phoneCheck.isSpam ? '–î–∞' : '–ù–µ—Ç'}
‚Ä¢ –†–∏—Å–∫ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: ${phoneCheck.fraudScore}/100

========================================

–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString()}
(c) CryptoCloud IP Check Service`;
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param phoneCheck –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param reportText –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
 */
function downloadPhoneReport(phoneCheck: { phoneNumber: string }, reportText: string): void {
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const element = document.createElement("a");
  const file = new Blob([reportText], {type: 'text/plain'});
  element.href = URL.createObjectURL(file);
  element.download = `phone_check_${phoneCheck.phoneNumber.replace(/\D/g, '')}_${Date.now()}.txt`;
  document.body.appendChild(element);
  element.click();
  
  // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
  setTimeout(() => {
    document.body.removeChild(element);
    URL.revokeObjectURL(element.href);
  }, 100);
}

export default function PhoneCheckerModal({ 
  isOpen, 
  onClose, 
  userId,
  serviceId
}: PhoneCheckerModalProps) {
  const [phoneNumber, setPhoneNumber] = useState<string>('');
  const [isChecking, setIsChecking] = useState<boolean>(false);
  const [checkResult, setCheckResult] = useState<PhoneCheckResult | null>(null);
  const { toast } = useToast();
  const inputRef = useRef<HTMLInputElement>(null);
  const [, navigate] = useLocation();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const handlePhoneInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const input = e.target.value;
    if (isPhoneInputValid(input)) {
      setPhoneNumber(input);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    setPhoneNumber('');
    setCheckResult(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleClose = () => {
    resetForm();
    onClose();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
  const handlePaste = useCallback(async () => {
    try {
      const text = await navigator.clipboard.readText();
      const formattedPhone = formatPhoneInput(text);
      if (formattedPhone) {
        setPhoneNumber(formattedPhone);
      }
    } catch (err) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞. –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.",
      });
    }
  }, [toast]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ API
  const checkPhoneNumber = async () => {
    if (!phoneNumber.trim()) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
      });
      return;
    }

    try {
      setIsChecking(true);

      // –í—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const response = await fetch('/api/phone/check', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phoneNumber: phoneNumber,
          userId: userId
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞');
      }

      const data = await response.json();
      const { phoneCheck, userBalance, transactionId } = data;
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      handleClose();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toast({
        title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
        description: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω üéâ",
      });
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      navigate(`/transaction/${transactionId}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      });
      setIsChecking(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[425px] fixed top-[230px] max-h-[calc(100vh-290px)] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <img src={phoneCheckIcon} alt="Phone Check" className="w-12 h-12" />
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          </DialogTitle>
        </DialogHeader>
        
        {!checkResult ? (
          <div className="mt-4 space-y-4">
            <div className="space-y-2">
              <p className="text-sm text-gray-600 mb-4">
                –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —Å–ø–∞–º –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.
                –û—Ç—á–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º –∑–∞—â–∏—Ç—ã –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–∞–º–∏.
              </p>
              <Label htmlFor="phone-number">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</Label>
              <div className="flex space-x-2">
                <Input
                  id="phone-number"
                  ref={inputRef}
                  placeholder=""
                  value={phoneNumber}
                  onChange={handlePhoneInputChange}
                  className="flex-1"
                  inputMode="tel"
                  onKeyPress={(e) => {
                    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É
                    const char = String.fromCharCode(e.charCode);
                    if (!/[0-9+]/.test(char)) {
                      e.preventDefault();
                    }
                  }}
                />
                <Button variant="outline" onClick={handlePaste} type="button">
                  <Icons.paste className="h-4 w-4" />
                </Button>
              </div>
              <p className="text-sm text-muted-foreground">
                –§–æ—Ä–º–∞—Ç: —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, +48123456789)
              </p>
            </div>
            
            <DialogFooter className="mt-4">
              <Button 
                onClick={checkPhoneNumber} 
                disabled={isChecking || !phoneNumber.trim()}
                className="w-full"
              >
                {isChecking ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    –ü—Ä–æ–≤–µ—Ä–∫–∞...
                  </>
                ) : (
                  <>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</>
                )}
              </Button>
            </DialogFooter>
          </div>
        ) : (
          <div className="mt-4 space-y-4">
            <div className="p-4 border rounded-lg">
              <div className="flex justify-between items-center">
                <h3 className="font-semibold">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h3>
                <Badge>{checkResult.phoneCheck.phoneNumber}</Badge>
              </div>
              
              <Separator className="my-2" />
              
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm">–°—Ç—Ä–∞–Ω–∞:</span>
                  <span className="text-sm font-medium">{checkResult.phoneCheck.country}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">–û–ø–µ—Ä–∞—Ç–æ—Ä:</span>
                  <span className="text-sm font-medium">{checkResult.phoneCheck.operator}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">–ê–∫—Ç–∏–≤–µ–Ω:</span>
                  <span className="text-sm font-medium">
                    {checkResult.phoneCheck.isActive ? '–î–∞' : '–ù–µ—Ç'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:</span>
                  <span className="text-sm font-medium">
                    {checkResult.phoneCheck.isVirtual ? '–î–∞' : '–ù–µ—Ç'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">–°–ø–∞–º/–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ:</span>
                  <span className="text-sm font-medium">
                    {checkResult.phoneCheck.isSpam ? '–î–∞' : '–ù–µ—Ç'}
                  </span>
                </div>
              </div>
              
              <Separator className="my-2" />
              
              <div className="mt-2">
                <div className="mb-1 flex justify-between">
                  <span className="text-sm font-medium">–†–∏—Å–∫ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞:</span>
                  <span 
                    className={`text-sm font-semibold ${
                      checkResult.phoneCheck.fraudScore < 30 
                        ? 'text-green-500' 
                        : checkResult.phoneCheck.fraudScore < 70 
                          ? 'text-amber-500' 
                          : 'text-red-500'
                    }`}
                  >
                    {checkResult.phoneCheck.fraudScore}/100
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full ${
                      checkResult.phoneCheck.fraudScore < 30 
                        ? 'bg-green-500' 
                        : checkResult.phoneCheck.fraudScore < 70 
                          ? 'bg-amber-500' 
                          : 'bg-red-500'
                    }`} 
                    style={{ width: `${checkResult.phoneCheck.fraudScore}%` }}
                  />
                </div>
              </div>
            </div>
            
            <div className="flex space-x-2 justify-between">
              <Button 
                variant="outline" 
                onClick={() => {
                  const reportText = generatePhoneReportText(checkResult);
                  downloadPhoneReport(
                    { phoneNumber: checkResult.phoneCheck.phoneNumber }, 
                    reportText
                  );
                }}
              >
                <Icons.download className="mr-2 h-4 w-4" />
                –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
              </Button>
              
              <Button 
                onClick={() => {
                  handleClose();
                  if (checkResult.transactionId) {
                    navigate(`/transaction/${checkResult.transactionId}`);
                  }
                }}
              >
                <ChevronRight className="mr-2 h-4 w-4" />
                –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}